// vertical align el inside parent with fixed height/min-height
// usage
// html - .parent>.child
// scss - @include v-align;
//     or @include v-align(250px);
//     or @include v-align(250px, bottom, before);
//
$maxWidth: 1920;
$maxWidthContainer: 1440;
$containerWidth: 1248; 
$minWidth:375;

@use "sass:math";
@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {
    white-space: nowrap;
    text-align: center;

    &:#{$va-pseudo} {
        content: '';
        display: inline-block;
        vertical-align: $va-direction;
        width: 0;
        min-height: $va-height;
    }

    >* {
        white-space: normal;
        display: inline-block;
        vertical-align: $va-direction;
        max-width: 99%;
    }
}

// vertical align a pair of child el inside parent
// usage
// html - .post>.image+.text
// scss - @include v-align-pair(image, text);
//     or @include v-align-pair(image, text, bottom);
//     or @include v-align-pair(image, text, middle, 200px);
//
@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto) {
    display: table;

    .#{$child-name1} {
        display: table-cell;
        vertical-align: $valign;
        width: $width1;
    }

    .#{$child-name2} {
        display: table-cell;
        vertical-align: $valign;
        width: $width2;
    }
}

// vertical align el
// usage: @include vertical-align-el;
//
@mixin vertical-align-el {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
///
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/// font-smothing
/// @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
    @if $value ==on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}


/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
@mixin hide-text {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
}


/// Creates a visual triangle.
/// Mixin takes ($size, $color, $direction)
/// The $size argument can take one or two values—width height.
/// The $color argument can take one or two
/// values—foreground-color background-color.
///
/// @author http://bourbon.io/docs/#triangle
///
/// $direction:
/// up, down, left, right, up-right, up-left, down-right, down-left
/// @example scss - Usage
///   @include triangle(12px, gray, down);
///   @include triangle(12px 6px, gray blue, up-left);
///
@mixin triangle($size, $color, $direction) {
    $width: nth($size, 1);
    $height: nth($size, length($size));
    $foreground-color: nth($color, 1);
    $background-color: if(length($color)==2, nth($color, 2), transparent);
    height: 0;
    width: 0;

    @if ($direction ==up) or ($direction ==down) or ($direction ==right) or ($direction ==left) {
        $width: $width / 2;
        $height: if(length($size) > 1, $height, $height/2);

        @if $direction ==up {
            border-bottom: $height solid $foreground-color;
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
        }

        @else if $direction ==right {
            border-bottom: $width solid $background-color;
            border-left: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }

        @else if $direction ==down {
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
            border-top: $height solid $foreground-color;
        }

        @else if $direction ==left {
            border-bottom: $width solid $background-color;
            border-right: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }
    }

    @else if ($direction ==up-right) or ($direction ==up-left) {
        border-top: $height solid $foreground-color;

        @if $direction ==up-right {
            border-left: $width solid $background-color;
        }

        @else if $direction ==up-left {
            border-right: $width solid $background-color;
        }
    }

    @else if ($direction ==down-right) or ($direction ==down-left) {
        border-bottom: $height solid $foreground-color;

        @if $direction ==down-right {
            border-left: $width solid $background-color;
        }

        @else if $direction ==down-left {
            border-right: $width solid $background-color;
        }
    }

    @else if ($direction ==inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    }

    @else if ($direction ==inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    }

    @else if ($direction ==inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    }

    @else if ($direction ==inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $width $height;
    }
}


/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: 0.3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
    $list: ();

    @each $prop in $properties {
        $str: #{$prop} #{$duration} #{$easing};
        $list: join($list, #{$str}, comma);
    }

    transition: $list;
}


/// Mixin for styling form-placeholders
/// @example scss - Usage
///   @include placeholder {
///    color: #333;
///   }
///
///   input[type='text'],
///   input[type='tel'],
///   input[type='email'] {
///     @include placeholder {
///      color: red;
///     }
///   }

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &::-moz-placeholder {
        opacity: 1;
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &.placeholder {
        @content;
    }
}

/// Font-size px to rem calc
/// @example scss - Usage
/// selector {
///    @include rem-font-size(16px);
/// }

@mixin rem-font-size($px-size) {
    font-size: $px-size;
    font-size: ($px-size / 10px) + rem;
}

//adaptive value
// 

 


//font-face.
@mixin font-face($font-name, $font-path, $weight, $style) {
    @font-face {
        font-family: '#{$font-name}';
        src: url('../fonts/#{$font-path}.woff2') format('woff'),
        url('../fonts/#{$font-path}.woff') format('woff');
        font-weight: $weight;
        font-style: $style;
    }
}

// Button sizes
@mixin button-color($btn-background, $btn-color, $btn-border, $btn-hover-background, $btn-hover-border, $btn-hover-color) {
    background: $btn-background;
    color: $btn-color;
    border: $btn-border;

    &:hover {
        background: $btn-hover-background;
        color: $btn-hover-color;
        border: $btn-hover-border;
    }
}

@mixin add-params() {

    @each $val,
    $media in $grid {
        &.df-rr-#{$val} {
            @include media('≥' + $media) {
                flex-direction: row-reverse;
            }
        }

        &.df-aic-#{$val} {
            @include media('≥' + $media) {
                align-items: center;
            }
        }
    }
}

// flex grid
@mixin flex-grid() {

    @each $val,
    $media in $grid {
        @for $gutter from 1 through 12 {
            .col-#{$val}-#{$gutter} {
                @include media('≥' + $media) {
                    flex: 1 0 calc(100% / 12 * #{$gutter});
                    max-width: calc(100% / 12 * #{$gutter});
                }
            }
        }

        @for $gutter from 0 through 11 {
            .col-offset-#{$val}-#{$gutter} {
                @include media('≥' + $media) {
                    margin-left: calc(100% / 12 * #{$gutter});
                }
            }
        }
    }
}

@mixin v-center($min-height: 400px) {
    display: flex;

    >* {
        min-height: $min-height;
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
    }
}

// $maxWidth: 1920;
// $maxWidthContainer: 1248;


// @mixin adaptive-value($property, $startSize, $minSize, $type) {
//   $addSize: $startSize - $minSize;

//   @if $type == 1 {
//     // Только если меньше контейнера
//     #{$property}: #{$startSize}px;

//     @media (max-width: #{$maxWidthContainer}px) {
//       #{$property}: calc(#{$minSize}px + #{$addSize}px * ((100vw - 370px) / #{$maxWidthContainer - 370}));
//     }
//   } @else if $type == 2 {
//     // Только если больше контейнера
//     #{$property}: #{$startSize}px;

//     @media (min-width: #{$maxWidthContainer}px) {
//       #{$property}: calc(#{$minSize}px + #{$addSize}px * ((100vw - 370px) / #{$maxWidth - 370}));
//     }
//   } @else {
//     // Всегда
//     #{$property}: calc(#{$minSize}px + #{$addSize}px * ((100vw - 370px) / #{$maxWidth - 370}));
//   }
// }

// // Пример использования миксина
// .example {
//   @include adaptive-value('font-size', 16, 14, 1);
// }

// $maxWidth: 1920;

@mixin adaptiv-font($pcSize, $mobSize, $maxWidth: 1440px) {
    $addSize: $pcSize - $mobSize;
    $addMobSize: $mobSize + ($addSize * 0.7);
  
    @media (max-width: 767px) {
      body {
        font-size: calc(#{$mobSize}px + #{$addMobSize}px * ((100vw - 370px) / #{$maxWidth}));
      }
    }
  
    @media (min-width: 768px) {
      body {
        font-size: calc(#{$mobSize}px + #{$addSize}px * (100vw / #{$maxWidth}));
      }
    }
  }
  
// приминение 
// h1 {
//   font-size: 40px;
//   font-weight: 900;
//   @include adaptiv-font(40, 24);
// }

//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}
//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Устанавливаем значения по умолчанию
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	
	// Адаптируем размер в промежутке между указанными ширинами вьюпорта
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Если поддерживается clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Если не поддерживается clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}
